import cv2
import pigpio
import time

# Servo setup
SERVO_PIN = 18  # Change to your GPIO pin for the servo
CENTER_POSITION = 1500  # Center position in microseconds
STEP = 10  # Step size for servo movement

# Initialize the servo
pi = pigpio.pi()
if not pi.connected:
    raise RuntimeError("Failed to connect to PiGPIO daemon!")
pi.set_servo_pulsewidth(SERVO_PIN, CENTER_POSITION)

# OpenCV setup
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")
cap = cv2.VideoCapture(0)

# Camera and servo parameters
FRAME_WIDTH = 640
FRAME_HEIGHT = 480
cap.set(cv2.CAP_PROP_FRAME_WIDTH, FRAME_WIDTH)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, FRAME_HEIGHT)

# Servo range limits
MIN_POSITION = 1000  # Min pulse width in microseconds
MAX_POSITION = 2000  # Max pulse width in microseconds
current_position = CENTER_POSITION

try:
    while True:
        ret, frame = cap.read()
        if not ret:
            print("Failed to capture frame")
            break

        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

        # Draw a rectangle around the detected face
        for (x, y, w, h) in faces:
            cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)
            face_center_x = x + w // 2
            frame_center_x = FRAME_WIDTH // 2

            # Adjust servo position based on face location
            if face_center_x < frame_center_x - 20:  # Face is left of center
                current_position += STEP
                current_position = min(current_position, MAX_POSITION)
            elif face_center_x > frame_center_x + 20:  # Face is right of center
                current_position -= STEP
                current_position = max(current_position, MIN_POSITION)

            # Set the servo position
            pi.set_servo_pulsewidth(SERVO_PIN, current_position)

            break  # Only track the first detected face

        # Display the frame
        cv2.imshow("Face Tracking", frame)

        # Break loop on 'q' key press
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

except KeyboardInterrupt:
    print("Program interrupted.")

finally:
    # Cleanup
    cap.release()
    cv2.destroyAllWindows()
    pi.set_servo_pulsewidth(SERVO_PIN, 0)  # Turn off the servo
    pi.stop()
